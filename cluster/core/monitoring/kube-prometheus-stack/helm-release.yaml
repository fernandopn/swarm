---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  releaseName: kube-prometheus-stack
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: '18.0.0'
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  interval: 1m
  install:
    remediation:
     retries: 3
  values:
    # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml

    # we are not running etcd
    kubeEtcd:
      enabled: false

    grafana:
      #https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
      podAnnotations:
        backup.velero.io/backup-volumes: grafana

      ingress:
        enabled: true
        annotations: 
          kubernetes.io/ingress.class: "nginx"  
          cert-manager.io/cluster-issuer: letsencrypt-production
          nginx.ingress.kubernetes.io/auth-signin: "https://auth.${SECRET_DOMAIN}"
          nginx.ingress.kubernetes.io/auth-url: "https://auth.${SECRET_DOMAIN}/api/verify"
        hosts:
        - grafana.${SECRET_DOMAIN}
        tls:
        - secretName: grafana-tls
          hosts:
          - grafana.${SECRET_DOMAIN}

      persistence:
        enabled: true
        existingClaim: grafana

    prometheus:
      ingress:
        enabled: true
        annotations: 
          kubernetes.io/ingress.class: "nginx"  
          cert-manager.io/cluster-issuer: letsencrypt-production
          nginx.ingress.kubernetes.io/auth-signin: "https://auth.${SECRET_DOMAIN}"
          nginx.ingress.kubernetes.io/auth-url: "https://auth.${SECRET_DOMAIN}/api/verify"
        hosts:
        - prometheus.${SECRET_DOMAIN}
        tls:
        - secretName: prometheus-tls
          hosts:
          - prometheus.${SECRET_DOMAIN}
      annotations:
        backup.velero.io/backup-volumes: prometheus-kube-prometheus-stack-prometheus-db
      prometheusSpec:
        retention: 14d
        enableAdminAPI: true
        walCompression: true
        ## Persistence
        storageSpec:
          volumeClaimTemplate:
            spec:
              selector:
                matchLabels:
                  app: prometheus
              resources:
                requests:
                  storage: 10Gi

    alertmanager:
      ingress:
        enabled: true
        annotations: 
          kubernetes.io/ingress.class: "nginx"  
          cert-manager.io/cluster-issuer: letsencrypt-production
          nginx.ingress.kubernetes.io/auth-signin: "https://auth.${SECRET_DOMAIN}"
          nginx.ingress.kubernetes.io/auth-url: "https://auth.${SECRET_DOMAIN}/api/verify"
        hosts:
        - alertmanager.${SECRET_DOMAIN}
        tls:
        - secretName: alertmanager-tls
          hosts:
          - alertmanager.${SECRET_DOMAIN}
      annotations:
        backup.velero.io/backup-volumes: alertmanager-kube-prometheus-stack-alertmanager-db
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              selector:
                matchLabels:
                  app: alertmanager
              resources:
                requests:
                  storage: 1Gi
